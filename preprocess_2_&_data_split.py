# -*- coding: utf-8 -*-
"""Preprocess-2 & data split

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_PPYf8J3UnA_QAwThcqNbT7hlflk1mor
"""

import numpy as np
import os
import glob
import pandas as pd
import cv2
import io
import tensorflow.keras
import sklearn
import pydot
import graphviz
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch import optim
from torch.optim.lr_scheduler import StepLR

import seaborn as sns
import matplotlib.pyplot as plt
import tensorflow as tf
import visualkeras

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from PIL import Image, ImageFile
from sklearn.metrics import classification_report, confusion_matrix
from tqdm import tqdm # 반복 루프의 progress bar, 남은 시간 정보 제공 패키지
import IPython

"""## background remove phase"""

#! pip install rembg --user
from rembg import remove

## 현재 설정 상태
#1. train data는 'train_img'라는 이름의 폴더에 저장되어 있음
#2. validation data는 'validation_img'라는 이름의 폴더에 저장되어 있음
#3. rembg 특성상 출력 폴더를 미리 만들어 놔야 하는데 저의 경우 train은 'train_img_output'으로,
# validation의 경우 'validation_img_output'이라는 이름의 폴더를 만들어 놓았습니다. 이제 배경 제거되는 이미지는
# 모두 여기로 출력되어 저장된다고 이해하시면 됩니다. 


# 이미지 데이터 경로 설정
input_path_train = './train_img/*.jpg' # train data 폴더 경로
input_path_val = './validation_img/*.jpg' # validation data 폴더 경로

# 배경제거 및 이미지 크기 변경을 활용한 이미지 전처리 코드(햔재 코드에서 이미지 크기 변경은 빠짐)
train = glob.glob(input_path_train)

for file in train:
    input_path = file
    output_path = input_path.replace("train_img", 'train_img_output')
    
    with open(input_path, 'rb') as i:
        with open(output_path, 'wb') as o:
            original_image = i.read()
            output = remove(original_image)
            o.write(output)
    
validation = glob.glob(input_path_val)
    
for file in validation:
    input_path = file
    output_path = input_path.replace("validation_img", 'validation_img_output')
    
    with open(input_path, 'rb') as i:
        with open(output_path, 'wb') as o:
            original_image = i.read()
            output = remove(original_image)
            o.write(output)

"""##Preprocess-2"""

import pandas as pd
train = pd.read_csv('train.csv')

groups = train.groupby(['A','B','C','D','E','F','G','H','I','J'])

train.head()
train.info()

train_set = train.iloc[:,2:]
train_set.info()

train_set['total'] = train_set.sum(axis=1)

train_set['total'] = train_set['total'].astype(int)

train_set

train_set['A'] = train_set['A'].astype(str)
train_set['B'] = train_set['B'].astype(str)
train_set['C'] = train_set['C'].astype(str)
train_set['D'] = train_set['D'].astype(str)
train_set['E'] = train_set['E'].astype(str)
train_set['F'] = train_set['F'].astype(str)
train_set['G'] = train_set['G'].astype(str)
train_set['H'] = train_set['H'].astype(str)
train_set['I'] = train_set['I'].astype(str)
train_set['J'] = train_set['J'].astype(str)
train_set.info()

train_set['key'] = train_set['A'] + train_set['B'] + train_set['C'] + train_set['D'] + train_set['E'] + train_set['F'] + train_set['G'] + train_set['H'] + train_set['I'] + train_set['J']
train_set

arrays = train_set['key'].unique().tolist()
number = [i for i in range(1,965)]

arrays_df = pd.DataFrame([x for x in zip(arrays,number)])
arrays_df.columns = ['key','class']
train_merge = pd.merge(left = train_set, right = arrays_df, how = "left", on = "key")

len(train_merge)

# pd.options.display.max_rows=32994

train_merge['class'].value_counts()

classify = train_merge.iloc[:,-1].to_list()
change = [0]

for i in range(1,32994):
    if classify[i] != classify[i-1]:
        change.append(i)
    else:
        pass
change.append(32994)
print(change)

dif = []
for i in range(1,1661):
    dif.append(change[i]-change[i-1])
print(dif)
set(dif)

"""## Split data set


"""

import os

for i in range(1, 1661):
    name = 'class' + str(i)
    path = './input/' + name
    os.mkdir(path)

from tqdm import tqdm
import glob

img_files = glob.glob('.//train_o//*.jpg')

import shutil
for i in range(0, 1660):
    for j in range(change[i], change[i+1]):
        from_file_path = img_files[j]
        name = 'class' + str(i+1)
        to_file_path = "./input/" + name
        shutil.copy(from_file_path, to_file_path)

import splitfolders
splitfolders.ratio("C:/Users/python_study/4Dblocks/input",  output="./train_split", seed=1234, ratio=(0.8,0.2))

def read_all_file(path):
    output = os.listdir(path)
    file_list = []

    for i in output:
        if os.path.isdir(path+"/"+i): 
            file_list.extend(read_all_file(path+"/"+i)) 
        elif os.path.isfile(path+"/"+i):
            file_list.append(path+"/"+i)

    return file_list

def copy_all_file(file_list, new_path):
    for src_path in file_list:
        file = src_path.split("/")[-1]
        shutil.copyfile(src_path, new_path+"/"+file)

src_path = "C:/Users/python_study/4Dblocks/train_split/train"
new_path = "C:/Users/python_study/4Dblocks/train_split/train"

file_list = read_all_file(src_path)
copy_all_file(file_list, new_path)
src_path = "C:/Users/python_study/4Dblocks/train_split/val"
new_path = "C:/Users/python_study/4Dblocks/train_split/val"

file_list = read_all_file(src_path)
copy_all_file(file_list, new_path)